// Code generated by 'freedom new-project infra-example'
package main

import (
	"time"

	"github.com/8treenet/freedom"
	_ "github.com/8treenet/freedom/example/infra-example/adapter/controllers"
	_ "github.com/8treenet/freedom/example/infra-example/adapter/repository"
	"github.com/8treenet/freedom/example/infra-example/server/conf"
	"github.com/8treenet/freedom/infra/kafka"
	"github.com/8treenet/freedom/infra/requests"
	"github.com/8treenet/freedom/middleware"
	"github.com/Shopify/sarama"
	"github.com/jinzhu/gorm"
	_ "github.com/jinzhu/gorm/dialects/mysql"
	"github.com/prometheus/client_golang/prometheus"
)

//mac: zookeeper-server-start /usr/local/etc/kafka/zookeeper.properties & kafka-server-start /usr/local/etc/kafka/server.properties
func main() {
	// If you use the default Kafka configuration, no need to set
	kafka.SettingConfig(func(conf *sarama.Config, other map[string]interface{}) {
		conf.Producer.Retry.Max = 3
		conf.Producer.Retry.Backoff = 5 * time.Second
		conf.Consumer.Offsets.Initial = sarama.OffsetOldest
		freedom.Logger().Info(other)
	})

	app := freedom.NewApplication()
	installDatabase(app)
	installMiddleware(app)
	addrRunner := app.NewRunner(conf.Get().App.Other["listen_addr"].(string))
	//app.InstallParty("/example")
	liveness(app)

	app.Run(addrRunner, *conf.Get().App)
}

func installMiddleware(app freedom.Application) {
	//Recover中间件
	app.InstallMiddleware(middleware.NewRecover())
	//Trace链路中间件
	app.InstallMiddleware(middleware.NewTrace("x-request-id"))
	//日志中间件，每个请求一个logger
	app.InstallMiddleware(middleware.NewRequestLogger("x-request-id"))
	//logRow中间件，每一行日志都会触发回调。如果返回true，将停止中间件遍历回调。
	app.Logger().Handle(middleware.DefaultLogRowHandle)

	//HttpClient 普罗米修斯中间件，监控ClientAPI的请求。
	middle := middleware.NewClientPrometheus(conf.Get().App.Other["service_name"].(string), freedom.Prometheus())
	requests.InstallMiddleware(middle)

	//总线中间件，处理上下游透传的Header
	app.InstallBusMiddleware(middleware.NewBusFilter())

	//安装消息监控中间件
	eventMiddle := NewMsgPrometheus(conf.Get().App.Other["service_name"].(string))
	kafka.InstallMiddleware(eventMiddle)
}

func installDatabase(app freedom.Application) {
	app.InstallDB(func() interface{} {
		conf := conf.Get().DB
		db, e := gorm.Open("mysql", conf.Addr)
		if e != nil {
			freedom.Logger().Fatal(e.Error())
		}

		db.DB().SetMaxIdleConns(conf.MaxIdleConns)
		db.DB().SetMaxOpenConns(conf.MaxOpenConns)
		db.DB().SetConnMaxLifetime(time.Duration(conf.ConnMaxLifeTime) * time.Second)
		return db
	})
}

func liveness(app freedom.Application) {
	app.Iris().Get("/ping", func(ctx freedom.Context) {
		ctx.WriteString("pong")
	})
}

// NewMsgPrometheus Kafka消息中间件
func NewMsgPrometheus(serviceName string) kafka.ProducerHandler {
	msgPushReqs := prometheus.NewCounterVec(
		prometheus.CounterOpts{
			Name:        "kafka_producer_total",
			Help:        "监控Kafka消息发送总数",
			ConstLabels: prometheus.Labels{"service": serviceName},
		},
		[]string{"topic", "error"},
	)
	msgPushLatency := prometheus.NewHistogramVec(prometheus.HistogramOpts{
		Name:        "kafka_producer_duration_seconds",
		Help:        "监控Kafka消息发送耗时",
		ConstLabels: prometheus.Labels{"service": serviceName},
	},
		[]string{"topic", "error"},
	)

	freedom.Prometheus().RegisterCounter(msgPushReqs)
	freedom.Prometheus().RegisterHistogram(msgPushLatency)

	return func(msg *kafka.Msg) {
		//返回一个消息中间件
		if msg.IsStopped() {
			//如果停止
			return
		}
		start := time.Now()
		//下一步
		msg.Next()

		//如果发送错误
		if msg.GetExecution() != nil {
			msgPushReqs.WithLabelValues(msg.Topic, msg.GetExecution().Error()).Inc()
			msgPushLatency.WithLabelValues(msg.Topic, msg.GetExecution().Error()).
				Observe(float64(time.Since(start).Nanoseconds()) / 1000000000)
			return
		}
		msgPushReqs.WithLabelValues(msg.Topic, "").Inc()
		msgPushLatency.WithLabelValues(msg.Topic, "").
			Observe(float64(time.Since(start).Nanoseconds()) / 1000000000)
	}
}
